@model HairdresserApp.Models.Appointment
@{
	ViewData["Title"] = "Randevu Düzenle";
}

<h3>Randevu Düzenle</h3>

<form asp-action="Edit" method="post">
    <div class="form-group">
        <label for="Date">Date</label>
        <input id="Date" type="date" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="@Model.AppointmentDate.ToString("yyyy-MM-dd")" />
    </div>
    <div class="form-group">
        <label for="UserId">User</label>
        <select asp-for="UserId" asp-items="ViewBag.Users" class="form-control"></select>
    </div>
	<div class="form-group">
        <label for="ServiceId">Service</label>
        <select asp-for="ServiceId" asp-items="ViewBag.Services" class="form-control"></select>
	</div>
	<div class="form-group">
		<label for="LocationId">Location</label>
        <select id="LocationId" asp-items="ViewBag.Locations" class="form-control"></select>
	</div>
    <div class="form-group">
        <label for="EmployeeId">Employee</label>
        <select asp-for="EmployeeId" name="EmployeeId" class="form-control">
            <option value="">Lütfen şube ve hizmet seçiniz.</option>
        </select>
    </div>
    <div class="form-group">
        <label for="AppointmentDate">Available Time Slots</label>
        <select asp-for="AppointmentDate" name="AppointmentDate" class="form-control">
            <option value="">Lütfen gün, şube ve hizmet seçiniz.</option>
        </select>
    </div>
	<button type="submit" class="btn btn-primary">Submit</button>
	<a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

<script>
    const dateInput = document.getElementById("Date");
    const locationDropdown = document.getElementById("LocationId");
    const serviceDropdown = document.getElementById("ServiceId");
    const employeeDropdown = document.getElementById("EmployeeId");
    const timeSlotDropdown = document.getElementById("AppointmentDate");

    function updateEmployees() {
        const locationId = locationDropdown.value;
        const serviceId = serviceDropdown.value;

        if (!locationId || !serviceId) {
            employeeDropdown.innerHTML = '<option value="">Lütfen şube ve hizmet seçiniz.</option>';
            return;
        }

        fetch(`/api/employees/by-location-and-service/${locationId}/${serviceId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Çalışan bilgileri alınamadı.");
                }
                return response.json();
            })
            .then(data => {
                employeeDropdown.innerHTML = "";

                if (data.length === 0) {
                    employeeDropdown.innerHTML = '<option value="">Seçilen şube ve hizmet için çalışan bulunamadı.</option>';
                    return;
                }

                data.forEach(employee => {
                    const option = document.createElement("option");
                    option.value = employee.id;
                    option.textContent = `${employee.firstName} ${employee.lastName}`;
                    employeeDropdown.appendChild(option);
                });
            })
            .catch(error => {
                employeeDropdown.innerHTML = '<option value="">Seçilen şube ve hizmet için çalışan bulunamadı.</option>';
            });
    }

    function updateAvailableTimes() {
        const selectedDate = dateInput.value;
        const serviceId = serviceDropdown.value;
        const employeeId = employeeDropdown.value;

        if (!selectedDate || !employeeId || !serviceId) {
            console.log("Lütfen gün, şube, çalışan ve hizmet seçiniz.");
            return;
        }

        fetch(`/api/appointments/available-times/${employeeId}/${serviceId}/${selectedDate}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Uygun saatler alınamadı.");
                }
                return response.json();
            })
            .then(data => {
                timeSlotDropdown.innerHTML = "";

                if (data.length === 0) {
                    timeSlotDropdown.innerHTML = '<option value="">Uygun saat bulunamadı.</option>';
                    return;
                }

                data.forEach(slot => {
                const [year, month, day] = selectedDate.split("-"); // Tarihi parçala
                const startTimeParts = slot.startTime.split(":");   // TimeSpan'i parçala
                const endTimeParts = slot.endTime.split(":");       // TimeSpan'i parçala

                const startDateTime = new Date(year, month - 1, day, startTimeParts[0], startTimeParts[1]);
                const endDateTime = new Date(year, month - 1, day, endTimeParts[0], endTimeParts[1]);

                const option = document.createElement("option");
                option.value = `${year}-${month}-${day}T${slot.startTime}`;
                option.textContent = `${startDateTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${endDateTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
                timeSlotDropdown.appendChild(option);
                });
            })
            .catch(error => {
                timeSlotDropdown.innerHTML = '<option value="">Uygun saat bulunamadı.</option>';
            });
    }

    dateInput.addEventListener("change", updateAvailableTimes);
    locationDropdown.addEventListener("change", updateEmployees);
    locationDropdown.addEventListener("change", updateAvailableTimes);
    serviceDropdown.addEventListener("change", updateEmployees);
    serviceDropdown.addEventListener("change", updateAvailableTimes);
    employeeDropdown.addEventListener("change", updateAvailableTimes);

    document.addEventListener("DOMContentLoaded", updateEmployees);
    document.addEventListener("DOMContentLoaded", updateAvailableTimes);
</script>